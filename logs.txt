Prompt No: 1 - Iteration No: 1 - {"predictedTokenFromCODEX":"chat","tokenAfterCorrection":"chat","didChange":true,"queryNumber":1,"currentPrompt":""}
Prompt No: 2 - Iteration No: 3 - {"predictedTokenFromCODEX":"fly","tokenAfterCorrection":"flyTo","didChange":false,"queryNumber":3,"currentPrompt":"// This file contains Minecraft bot commands and the code needed to accomplish them using the Mineflayer JavaScript library. If asked something conversational, the bot should use bot.chat() to answer.\n\n// go forward\nbot.setControlState('forward', true);\n\n// Stop moving\nbot.clearControlStates();\n\n// Now backward for a second\nbot.setControlState('back', true)\nsetTimeout(() => {\n    bot.clearControlStates();\n}, 1000);\n\n// nice!\nbot.chat(\"Thanks!\");\n\n// How are you?\nbot.chat(\"I'm great! How about you?\");\n\n// I'm good. What are you up to?\nbot.chat(\"Just roaming around Minecraft\");\n\n// Jump!\nbot.setControlState('jump', true);\nbot.setControlState('jump', false);\n\n// k now look at me\nwatchTarget();\n\n// keep looking at me\nwatchInterval = setInterval(watchTarget, 50)\n\n// ok stop\nclearInterval(watchInterval);\nbot.clearControlStates();\n\n// Go to the right a bit\nbot.setControlState('right', true);\nsetTimeout(() => {\n    bot.clearControlStates();\n}, 1000);\n\n// come to me\ngoToPlayer(bot, 3, username)\n\n// Now follow me!\ngoToPlayerInterval = setInterval(() => goToPlayer(bot, 3, username), 3000)\n\n// good work!\nbot.chat(\"Thanks!\")\n\n// Go to the grass\nlocateBlock(bot, 'grass', 0)\n.then(success => success ? bot.chat(\"I found grass!\") : _throw(\"I couldn't find grass!\"))\n\n// Open the chest\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => openChest(bot, chestBlock))\n.then(chestBlock => chestBlock ? bot.chat('Chest is opened!') : _throw('Chest is not opened!'))\n\n// What items are in it?\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => listItemsInChest(bot, chestBlock))\n.then(response => bot.chat('Looks like ' + response))\n\n// Put the furnace into the chest\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => depositItemIntoChest(bot, chestBlock, 'furnace'))\n.then(success => success ? bot.chat('The furnace is now in the chest!') : _throw('I couldnt put the furnace in the chest!'))\n\n// Get one bread and 1 paper from the chest\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => getItemFromChest(bot, chestBlock, 'bread', 1))\n.then(chestBlock => getItemFromChest(bot, chestBlock, 'paper', 1))\n.then(success => success ? bot.chat(\"I got a bread and a paper from the chest\") : _throw(\"I couldn't get a bread and a paper from the chest\"))\n\n// Give me the paper\ngoToPlayer(bot, 3, username)\n.then(success => success ? dropItem(bot, 'paper', 1) : _throw(\"I wasn't able to drop the paper!\"))\n.then(success => success && bot.chat(\"Here you go!\"));\n\n// Close it\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => closeChest(bot, chestBlock))\n.then(success => success ? bot.chat(\"Chest is all closed up!\") : _throw(\"I couldnt close the chest!\"))\n\n// where are the cobblestones?\nbot.chat(\"I'll see if I can find some\")\nlocateBlock(bot, 'cobblestone', 0)\n\n// OK, get some for me!\nmineBlock(bot, 'cobblestone', 4)\n.then(success => success ? goToPlayer(bot, 3, username) : _throw(\"I couldn't find any cobblestones!\"))\n.then(success => success ? bot.chat(\"I got 4 cobblestones!\") : _throw(\"I couldn't get you the cobblestones!\"));\n\n// Craft a furnace\ngetIngredients(bot, 'furnace')\n.then(ingredients => createQueryPrompt(bot, ingredients, 'Craft a furnace'))\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n.then(_ => craftItem(bot, 'furnace', 1))\n.then(_ => equipItem(bot, 'furnace'))\n.then(success => success ? bot.chat(\"I made a furnace!\") : _throw(\"I couldn't make the furnace\"));\n\n// Thanks!\nbot.chat(\"No problem!\");\n\n// How many oak planks do you have?\ncreateQueryPrompt(bot, {}, 'How many oak planks do you have')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n// How much iron do you have?\ncreateQueryPrompt(bot, {}, 'How many iron ingots do you have')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n// what do i need to make a furnace\ngetIngredients(bot, 'furnace')\n.then(ingredients => createQueryPrompt(bot, ingredients, 'What materials do I need to craft a furnace'))\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n// Response: 8 cobblestones are needed to make a furnace\n\n// do you have enough to craft a furnace\ngetIngredients(bot, 'furnace')\n.then(ingredients => createQueryPrompt(bot, ingredients, 'Do I have enough materials to craft a furnace'))\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n// Response: Yes, I have enough cobblestone to craft a furnace.\n\n// How many more cobblestones to make one\ncreateQueryPrompt(bot, {}, 'How many more cobblestones do I need to have 8 cobblestones')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n// Stand on that oak log\nlocateBlock(bot, 'oak_log', 0)\n.then(success => success ? bot.chat(\"I'm standing on the oak log!\") : _throw(\"I couldn't stand on the oak log!\"))\n\n// How long is a minecraft day?\nbot.chat(\"A day in Minecraft is 20 minutes!\");\n\n// whats in your inventory\ncreateQueryPrompt(bot, {}, 'What do you have in your inventory')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n//Functions that the bot can execute include bot.setControlState(control, state), bot.clearControlStates(), bot.chat(message), bot.mount(bot.nearestEntity((entity) => { return entity.name === 'minecart' })), bot.dismount() etc.\n\n// where are you\nbot.chat(\"I'm at \" + bot.entity.position);\n\n// use the creative fly function to fly one y coordinate higher\nbot.creative.flyTo("}
Prompt No: 2 - Iteration No: 4 - {"predictedTokenFromCODEX":"offset","tokenAfterCorrection":"offset","didChange":true,"queryNumber":4,"currentPrompt":""}
Prompt No: 3 - Iteration No: 6 - {"predictedTokenFromCODEX":"To","tokenAfterCorrection":"flyTo","didChange":false,"queryNumber":6,"currentPrompt":"// This file contains Minecraft bot commands and the code needed to accomplish them using the Mineflayer JavaScript library. If asked something conversational, the bot should use bot.chat() to answer.\n\n// go forward\nbot.setControlState('forward', true);\n\n// Stop moving\nbot.clearControlStates();\n\n// Now backward for a second\nbot.setControlState('back', true)\nsetTimeout(() => {\n    bot.clearControlStates();\n}, 1000);\n\n// nice!\nbot.chat(\"Thanks!\");\n\n// How are you?\nbot.chat(\"I'm great! How about you?\");\n\n// I'm good. What are you up to?\nbot.chat(\"Just roaming around Minecraft\");\n\n// Jump!\nbot.setControlState('jump', true);\nbot.setControlState('jump', false);\n\n// k now look at me\nwatchTarget();\n\n// keep looking at me\nwatchInterval = setInterval(watchTarget, 50)\n\n// ok stop\nclearInterval(watchInterval);\nbot.clearControlStates();\n\n// Go to the right a bit\nbot.setControlState('right', true);\nsetTimeout(() => {\n    bot.clearControlStates();\n}, 1000);\n\n// come to me\ngoToPlayer(bot, 3, username)\n\n// Now follow me!\ngoToPlayerInterval = setInterval(() => goToPlayer(bot, 3, username), 3000)\n\n// good work!\nbot.chat(\"Thanks!\")\n\n// Go to the grass\nlocateBlock(bot, 'grass', 0)\n.then(success => success ? bot.chat(\"I found grass!\") : _throw(\"I couldn't find grass!\"))\n\n// Open the chest\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => openChest(bot, chestBlock))\n.then(chestBlock => chestBlock ? bot.chat('Chest is opened!') : _throw('Chest is not opened!'))\n\n// What items are in it?\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => listItemsInChest(bot, chestBlock))\n.then(response => bot.chat('Looks like ' + response))\n\n// Put the furnace into the chest\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => depositItemIntoChest(bot, chestBlock, 'furnace'))\n.then(success => success ? bot.chat('The furnace is now in the chest!') : _throw('I couldnt put the furnace in the chest!'))\n\n// Get one bread and 1 paper from the chest\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => getItemFromChest(bot, chestBlock, 'bread', 1))\n.then(chestBlock => getItemFromChest(bot, chestBlock, 'paper', 1))\n.then(success => success ? bot.chat(\"I got a bread and a paper from the chest\") : _throw(\"I couldn't get a bread and a paper from the chest\"))\n\n// Give me the paper\ngoToPlayer(bot, 3, username)\n.then(success => success ? dropItem(bot, 'paper', 1) : _throw(\"I wasn't able to drop the paper!\"))\n.then(success => success && bot.chat(\"Here you go!\"));\n\n// Close it\nlocateBlock(bot, 'chest', 1)\n.then(chestBlock => closeChest(bot, chestBlock))\n.then(success => success ? bot.chat(\"Chest is all closed up!\") : _throw(\"I couldnt close the chest!\"))\n\n// where are the cobblestones?\nbot.chat(\"I'll see if I can find some\")\nlocateBlock(bot, 'cobblestone', 0)\n\n// OK, get some for me!\nmineBlock(bot, 'cobblestone', 4)\n.then(success => success ? goToPlayer(bot, 3, username) : _throw(\"I couldn't find any cobblestones!\"))\n.then(success => success ? bot.chat(\"I got 4 cobblestones!\") : _throw(\"I couldn't get you the cobblestones!\"));\n\n// Craft a furnace\ngetIngredients(bot, 'furnace')\n.then(ingredients => createQueryPrompt(bot, ingredients, 'Craft a furnace'))\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n.then(_ => craftItem(bot, 'furnace', 1))\n.then(_ => equipItem(bot, 'furnace'))\n.then(success => success ? bot.chat(\"I made a furnace!\") : _throw(\"I couldn't make the furnace\"));\n\n// Thanks!\nbot.chat(\"No problem!\");\n\n// How many oak planks do you have?\ncreateQueryPrompt(bot, {}, 'How many oak planks do you have')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n// How much iron do you have?\ncreateQueryPrompt(bot, {}, 'How many iron ingots do you have')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n// what do i need to make a furnace\ngetIngredients(bot, 'furnace')\n.then(ingredients => createQueryPrompt(bot, ingredients, 'What materials do I need to craft a furnace'))\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n// Response: 8 cobblestones are needed to make a furnace\n\n// do you have enough to craft a furnace\ngetIngredients(bot, 'furnace')\n.then(ingredients => createQueryPrompt(bot, ingredients, 'Do I have enough materials to craft a furnace'))\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n// Response: Yes, I have enough cobblestone to craft a furnace.\n\n// How many more cobblestones to make one\ncreateQueryPrompt(bot, {}, 'How many more cobblestones do I need to have 8 cobblestones')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n// Stand on that oak log\nlocateBlock(bot, 'oak_log', 0)\n.then(success => success ? bot.chat(\"I'm standing on the oak log!\") : _throw(\"I couldn't stand on the oak log!\"))\n\n// How long is a minecraft day?\nbot.chat(\"A day in Minecraft is 20 minutes!\");\n\n// whats in your inventory\ncreateQueryPrompt(bot, {}, 'What do you have in your inventory')\n.then(queryPrompt => model.getCompletion(queryPrompt))\n.then(completion => evaluateCode(completion, true))\n\n//Functions that the bot can execute include bot.setControlState(control, state), bot.clearControlStates(), bot.chat(message), bot.mount(bot.nearestEntity((entity) => { return entity.name === 'minecart' })), bot.dismount() etc.\n\n// where are you\nbot.chat(\"I'm at \" + bot.entity.position);\n\n// use the creative fly function to fly one y coordinate higher\nbot.creative.flyTo(bot.entity.position.offset(0, 1, 0));\n\n// use the creative fly function to fly one y coordinate lower\nbot.creative.flyTo("}
Prompt No: 3 - Iteration No: 7 - {"predictedTokenFromCODEX":"offset","tokenAfterCorrection":"offset","didChange":true,"queryNumber":7,"currentPrompt":""}
